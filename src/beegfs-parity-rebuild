#!/bin/bash
set -o nounset
set -o pipefail
set -o errexit

dname="${1:-}"
last_successful_timestamp_file="$dname/spool/last-gen-timestamp"

function usage {
echo "usage: beegfs-parity-rebuild <config> <host to rebuild>"
echo "   or: beegfs-parity-rebuild --help"
}

case $dname in
    -h|--help)
    usage
    exit 0
    ;;
    "")
    usage
    exit 1
    ;;
    *)
    ;;
esac

rebuild_host="${2:-}"
if [ -z $rebuild_host ]; then
    echo "You must specify a host to rebuild" 1>&2
    exit 1
fi

function must_have_file {
    f="$dname/$1"
    if [ ! -e "$f" ]; then
        echo "Can't find file '$f'" 1>&2
        exit 1
    fi
}
must_have_file "etc/basedir"
must_have_file "etc/exechost"
must_have_file "etc/hosts"

exechost="`cat $dname/etc/exechost`"

if [[ $EUID -ne 0 ]]; then
    echo "You need root privilege to run this program" 1>&2
    exit 1
fi
if [ "`hostname -s`" != "$exechost" ]; then
    echo "Should only run on $exechost" 1>&2
    exit 1
fi

function collect_hostlist {
    local full_hostlist="$1"
    local store="$2"
    cat "$full_hostlist" | xargs -n 1 -P 8 -I{} ssh {} "test -f $store/targetNumID && hostname -s; exit 0"
}

# Make sure all necessary folders are present
mkdir --parents "$dname/run"
mkdir --parents "$dname/spool"

(
if flock --exclusive --nonblock 500; then
    if [ ! -f "$last_successful_timestamp_file" ]; then
        echo "** Error: Does not look like you have built any parity" 1>&2
        exit 1
    fi

    storage_nodes="$dname/etc/hosts"
    hostfile="$dname/run/active_storage_nodes"
    base_dir=`cat $dname/etc/basedir`
    spool="$dname/spool/"
    collect_hostlist "$storage_nodes" "$base_dir" | sort > "$hostfile"

    if ! grep -q "$rebuild_host" "$hostfile" ; then
        echo "** Error: Uknown host '$rebuild_host'" 1>&2
        exit 1
    fi

    safe_host=`comm -13 <(echo $rebuild_host) "$hostfile" | head -n 1`
    ssh $rebuild_host rm -rf $spool/db
    scp -pr $safe_host:$spool/db $rebuild_host:$spool/db
    rebuild_id=`ssh "$rebuild_host" cat "$base_dir/targetNumID"`

    echo `hostname -s` > $dname/run/hosts
    cat "$hostfile" >> $dname/run/hosts
    mpirun="mpirun --hostfile $dname/run/hosts"
    $mpirun ./bp-parity-rebuild $rebuild_id $base_dir $spool/data /tmp/$base_dir-corrupted_chunks $spool/db

    # Collect list of potentially corrupt chunks
    for h in `cat "$hostfile"`; do
        ssh $h cat /tmp/$base_dir-corrupted_chunks
    done | sort -u > $spool/corrupted_chunks
else
    echo "** Error: Can't acquire lock, is the program already running?" 1>&2
fi
) 500>"$dname/run/lock"

