#!/bin/bash
set -o nounset
set -o pipefail
set -o errexit

arg1="${1:-}"
dname="${2:-}"
last_successful_timestamp_file="/opt/$dname/spool/last-gen-timestamp"

function usage {
echo "usage: beegfs-parity-gen --complete <config>"
echo "   or: beegfs-parity-gen --partial <config>"
}

case $arg1 in
    -h|--help)
    usage
    exit 0
    ;;
    --partial)
    operation="partial"
    ;;
    --complete)
    operation="complete"
    ;;
    *)
    usage 1>&2
    exit 1
    ;;
esac

if [ -z $dname ]; then
    echo "You must specify a config to use" 1>&2
    exit 1
fi

function must_have_file {
    f="/opt/$dname/$1"
    if [ ! -e "$f" ]; then
        echo "Can't find file '$f'" 1>&2
        exit 1
    fi
}
must_have_file "etc/basedir"
must_have_file "etc/exechost"
must_have_file "etc/hosts"

exechost="`cat /opt/$dname/etc/exechost`"

if [[ $EUID -ne 0 ]]; then
    echo "You need root privilege to run this program" 1>&2
    exit 1
fi
if [ "`hostname -s`" != "$exechost" ]; then
    echo "Should only run on $exechost" 1>&2
    exit 1
fi

# Make sure all necessary folders are present
mkdir --parents "/opt/$dname/run"
mkdir --parents "/opt/$dname/spool"

function collect_hostlist {
    local full_hostlist="$1"
    local store="$2"
    cat "$full_hostlist" | xargs -n 1 -P 8 -I{} ssh {} "test -f $store/targetNumID && hostname -s; exit 0"
}

function check_beegfs_servers_online {
#TODO: any other ways the servers can be down?
if beegfs-check-servers | grep -q "UNREACHABLE\|failed"; then
    return 1
fi
return 0
}

(
if flock --exclusive --nonblock 500; then
    if ! check_beegfs_servers_online; then
        echo "** Error: Not all of beegfs is available" 1>&2
        exit 1
    fi

    last_timestamp="0"
    if [ -f "$last_successful_timestamp_file" ]; then
        last_timestamp="`cat $last_successful_timestamp_file`"
    fi
    if [[ "$last_timestamp" =~ [^0-9] ]] ; then
        echo "** Error: Stored timestamp does not look like a number" 1>&2
        echo "          see: $last_successful_timestamp_file" 1>&2
        exit 1
    fi
    timestamp=`date +%s`

    clean_old="N"
    if [ "$operation" == "complete" ] && [ "$last_timestamp" != "0" ]; then
        echo "** Warning: A complete run has already been done."
        echo "  All existing parity data will be deleted."
        read -p "Continue? [y/N]" -n 1 -r -s reply
        echo
        if [[ $reply =~ [Yy] ]]; then
            echo "Continuing."
            clean_old="Y"
        else
            echo "Aborting"
            exit 1
        fi
    fi

    PATH="`pwd`:$PATH"
    storage_nodes="/opt/$dname/etc/hosts"
    hostfile="/opt/$dname/run/active_storage_nodes"
    base_dir=`cat /opt/$dname/etc/basedir`
    collect_hostlist "$storage_nodes" "$base_dir" | sort > "$hostfile"
    echo `hostname -s` > /opt/$dname/run/hosts
    # We need two ranks per host so we double it up
    paste -d '\n' "$hostfile" "$hostfile" >> "/opt/$dname/run/hosts"
    mpirun="mpirun --hostfile /opt/$dname/run/hosts"
    if [ "$clean_old" == "Y" ]; then
        echo "Removing old parity data"
        mpirun --hostfile $hostfile find $base_dir/parity -mindepth 1 -delete
        echo "Removing old parity databases"
        mpirun --hostfile $hostfile find /opt/$dname/spool -mindepth 1 -delete
        find /opt/$dname/spool/db -mindepth 1 -delete
        find /opt/$dname/spool/ -mindepth 1 -type f -delete
    fi
    $mpirun ./bp-parity-gen $operation $base_dir $last_timestamp $timestamp /opt/$dname/spool/data /opt/$dname/spool/db

    echo $timestamp > $last_successful_timestamp_file
    $mpirun ./bp-find-chunks-changed-between --cleanup-until="$timestamp" --store="$base_dir"
else
    echo "** Error: Can't acquire lock, is the program already running?" 1>&2
fi
) 500>"/opt/$dname/run/lock"

